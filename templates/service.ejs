import { Injectable, InternalServerErrorException, Logger, NotFoundException} from '@nestjs/common';
<% if (repository) { %>import { <%= nameUpper %>Repository } from './<%= repositoryFileName %>';<% } %>
<% if (model || repository || crud) { %>import { <%= modelClass %> } from './<%= modelDir %><%= modelFileName %>';<% } %>

@Injectable()
export class <%= nameUpper %>Service {

    logger: Logger;

    public constructor(<% if (repository || crud) { %> private <%= name  %>Repository: <%= repositoryName %><% } %>) {
        this.logger = new Logger('<%= nameUpper %>Service');
    }

<% if (crud) { -%>
    public async findById(id: number): Promise<<%= modelClass %>> {
        this.logger.debug(`findById`, id);
        let found = await this.<%= name %>Repository.findOneBy({ id });

        if (!found) {
            throw new NotFoundException('NOT_FOUND_EXCEPTION');
        }
        return found;
    }

    public async create(<%= modelClassLower %>: <%= modelClass %>): Promise<void> {
        try {
            this.logger.debug(`create()`);
            await this.<%= name %>Repository.save(<%= modelClassLower %>);
          } catch (e) {
             this.logger.error(e);
            throw new InternalServerErrorException('INTERNAL_SERVER_ERROR');
        }
    }

    async update(<%= modelClassLower %>: <%= modelClass %>): Promise<void> {
        try {
            this.logger.debug(`update ${<%= modelClassLower %>.id}`);
            <%= modelClassLower %>.updatedAt = new Date();
            await this.<%= name %>Repository.save(<%= modelClassLower %>);
        } catch (e) {
             this.logger.error(e);
             throw new InternalServerErrorException('INTERNAL_SERVER_ERROR');
        }
    }

    async delete(id : number): Promise<void> {
        this.logger.debug(`delete ${id}`);
        const result = await this.<%= name %>Repository.delete(id);

        if (result.affected === 0) {
            throw new NotFoundException(`NOT_FOUND_EXCEPTION`);
        }
    }

    async findAll(): Promise< <%= modelClass %>[]> {
        this.logger.debug(`findAll()`);
         return await this.<%= name %>Repository.find();
    }

<% } %>
}
