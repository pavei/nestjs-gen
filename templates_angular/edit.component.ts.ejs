import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import {NgxSpinnerService} from 'ngx-spinner';
import {ToasterService} from 'angular2-toaster';
import { TranslatorService } from '@app/core/translator/translator.service';
import { <%= classify(name) %>Service } from '../<%=dasherize(name)%>.service';
import { <%= classify(name) %> } from '../<%=dasherize(name)%>.entity';
<% modelFields.forEach(function(prop) { %>
    <% if (prop.relation != null) { %>import { <%= classify( prop.type)+'Service' %> } from '@routes/<%= prop.type.toLowerCase() %>/<%= prop.type.toLowerCase() %>.service';<% } -%>
    <% if (prop.relation != null) { %>import { <%= classify( prop.type) %> } from '@routes/<%= prop.type.toLowerCase() %>/<%= prop.type.toLowerCase() %>.entity';<% } -%>
<% }) -%>



@Component({
  selector: 'app-<%=dasherize(name)%>-edit',
  templateUrl: './<%=dasherize(name)%>-edit.component.html'
})
export class <%=classify(name)%>EditComponent implements OnInit {

  item!: <%=classify(name)%>;
<% modelFields.forEach(function(prop) { %>
<% if (prop.relation != null) { %> <%=pluralize(prop.name)%> : Array<<%=prop.type%>> <% } -%>
<% }) -%>

<% modelFields.forEach(function(prop) { %>

    <% if (prop.relation == "MANY_TO_MANY" || prop.relation == "ONE_TO_MANY") { %>
      temp<%=classify(prop.name)%>;
    <% } -%>
<% }) -%>

  constructor(
    private route: ActivatedRoute,
    private router: Router,
    private spinner: NgxSpinnerService,
    public translate: TranslatorService,
    public toasterService: ToasterService,
    private <%=camelize(name)%>Service: <%=classify(name)%>Service
<% modelFields.forEach(function(prop) { %>
    <% if (prop.relation != null) { %>
    <%= ', private '+prop.name+'Service'%> : <%= classify( prop.type)+'Service' %>
    <% } -%>
<% }) -%>
) {
  }



  async loadDependencies(){
    <% modelFields.forEach(function(prop) { %>
        <% if (prop.relation != null) { %>
         this.<%=pluralize(prop.name)%> = await this.<%= prop.name+'Service' %>.all();

        <% if (prop.relation == "MANY_TO_MANY" || prop.relation == "ONE_TO_MANY") { %>
         if (this.item.<%=pluralize(prop.name)%>){
              this.<%=pluralize(prop.name)%> = this.<%=pluralize(prop.name)%>.filter(item => !this.item.<%=pluralize(prop.name)%>.find(myItem => myItem.id == item.id))
          }

        <% } -%>
        <% } -%>
    <% }) -%>
  }

  async ngOnInit() {

      const {id} = this.route.snapshot.params;
      try {

        await this.spinner.show();


        if (id) {
          this.item = await this.<%=camelize(name)%>Service.find(id);
          this.item =  <%=classify(name)%>.fromJson(this.item);
        } else {
          this.item = new <%=classify(name)%>();
        }

        await this.loadDependencies();

      } catch (e) {
        console.error(e);
      } finally {
        await this.spinner.hide();

      }
  }

    async save(form) {
    await this.spinner.show();

    try{
      this.item.validate();

      await (this.item.id ? this.<%=camelize(name)%>Service.update(this.item) :this.<%=camelize(name)%>Service.save(this.item))

      this.toasterService.pop(
        'success',
        this.translate.success(),
        this.translate.translateText('SAVE_SUCCESS')
      );
      await this.router.navigate(['/<%=pluralize(name)%>']);

    }catch(error : any) {
      this.toasterService.pop("error", this.translate.error(), this.translate.translateText(error.message || error.error.message ));
  }finally{
      await this.spinner.hide();
    }
  }

  cancel() {
    this.router.navigate(['/<%=pluralize(name)%>']);
  }

    <% modelFields.forEach(function(prop) { %>

        <% if (prop.relation == "MANY_TO_MANY" || prop.relation == "ONE_TO_MANY") { %>
            add<%= prop.type %>(e){
              e.preventDefault();
                        this.item.add<%= prop.type %>(this.temp<%=classify(prop.name)%>);
                        this.<%=pluralize(prop.name)%> = this.<%=pluralize(prop.name)%>.filter(item => item.id != this.temp<%=classify(prop.name)%>.id);
                        this.temp<%=classify(prop.name)%> = null;
            }

            remove<%= prop.type %>(obj: <%= prop.type %>) {
                this.item.remove<%= prop.type %>(obj);
                this.<%=pluralize(prop.name)%> = [...this.<%=pluralize(prop.name)%>, obj]
                this.temp<%=classify(prop.name)%> = null;
            }

        <%}%>

    <% }) %>
}
