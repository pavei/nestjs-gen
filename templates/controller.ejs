import { Controller, Request, Param, Body, Get, Post, Put, Delete, ParseIntPipe, ParseUUIDPipe<% if (auth) { %>, UseGuards<% } %> } from "@nestjs/common";
<% if (service) { %>import { <%= nameUpper %>Service } from './<%= serviceFileName %>';
<% } else { -%>
<% if (repository) { %>import { <%= nameUpper %>Repository } from './<%= repositoryFileName %>';
<% } else if (crud) { %>import { Repository } from 'typeorm'; <% } -%>
<% } -%>
<% if (model || repository || crud) { %>import { <%= modelClass %> } from './<%= modelDir %><%= modelFileName %>';<% } %>
<% if (auth) { %>import { <%= authGuardClass %> } from '<%= authGuardDir %>';<% } %>
import { GetUser } from '../auth/get-user.decorator';


@UseGuards(AuthGuard())
@Controller('/<%= namePluralize %>')
export class <%= nameUpper %>Controller {

    public constructor(<% if (service) { %>private readonly <%= name %>Service: <%= nameUpper %>Service<% } -%>
<% if (!service && (repository || crud)) { %>private readonly <%= name %>Repository: <%- repositoryName %><% } %>) {
    }

<% if (crud) { -%>
    @Get('/:id')
    public async getById(@Param('id', ParseIntPipe) id,  @GetUser() user): Promise<<%= modelClass %>> {
        <% if (service) { -%>return await this.<%= name %>Service.findById(id);
        <% } else if (repository || crud) { %>return await this.<%= name %>Repository.findOne({ id });<% } %>
    }

    @Post()
    public async create(@Body() <%= modelClassLower %>: <%= modelClass %>, @GetUser() user): Promise<any> {
        <% if (service) { %>
        return await this.<%= name %>Service.create(<%= modelClassLower %>);
        <% } else if (repository || crud) { %>let <%= modelClassLower %>: <%= modelClass %> = new <%= modelClass %>();
        Object.assign(<%= modelClassLower %>, body);
        return this.<%= name %>Repository.save(<%= modelClassLower %>);<% } %>
    }

    @Put('/:id')
    public async update(@Param('id', ParseIntPipe) id, @Body() <%= modelClassLower %>: <%= modelClass %>, @GetUser() user): Promise<any> {
        <% if (service) { %>

        return await this.<%= name %>Service.update(<%= modelClassLower %>);
        <% } else if (repository || crud) { %>let <%= modelClassLower %>: <%= name %> = await this.<%= name %>Repository.findOne({ id });
        if (!<%= modelClassLower %>) {
            throw "Object <%= modelClassLower %> does not exist";
        } 

        Object.assign(<%= modelClassLower %>, body);
        return this.<%= name %>Repository.save(<%= modelClassLower %>);
    <% } %>
    }

    @Delete('/:id')
    public async delete(@Param('id', ParseIntPipe) id, @GetUser() user): Promise<any> {
        <% if (service) { %>return await this.<%= name %>Service.delete(id);
        <% } else if (repository || crud) { %>let <%= modelClassLower %> = await this.<%= name %>Repository.findOne({ id });
        if (!<%= modelClassLower %>) {
            throw "Object <%= modelClassLower %> does not exist";
        }

        await this.<%= name %>Repository.delete(id);
        return <%= name%>;<% } %>
    }

    @Get()
    public async list(@GetUser() user): Promise<Array<<%= modelClass %>>> {
        <% if (service) { %>return await this.<%= name %>Service.findAll();
        <% } else if (repository || crud) { %>return await this.<%= name %>Repository.find({<% if (auth) { %>where: { user: req.principal }<% } %>});<% } %>
    }<% } %>

}
